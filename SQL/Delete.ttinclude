<#+

private void GenerateDeleteStoredProcedures(IEnumerable<Database> databases, String outputDirectory, List<string> tables)
{
  foreach (var database in databases)
  {
    foreach (var schema in database.Schemas)
    {
      foreach (var table in schema.Tables.Where(t => tables.Contains(t.Name)))
      {
        if (table.IsView)
          continue;

        var spName = this.GetStoredProcedureName(database.Name, table.Schema.Name, table.Name, "Delete");
		var spFileName = this.GetStoredProcedureFileName(table.Name, "Delete");

#>
IF OBJECT_ID(N'<#= spName #>') IS NOT NULL
  DROP PROCEDURE <#= spName #>; 
GO

SET NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER, XACT_ABORT ON;
GO

CREATE PROCEDURE <#= spName #>
  (
    <#= String.Join("," + Environment.NewLine + "    ", table.Columns.GetStoredProcedureParameters(ColumnType.PrimaryKey)) #>
  )
AS
BEGIN
  SET NOCOUNT ON;

  DELETE FROM <#= table.SchemaNameAndTableName #>
    WHERE
      <#= String.Join(" AND" + Environment.NewLine + "      ", table.Columns.GetWhereClauseColumnList(ColumnType.PrimaryKey)) #>;

  RETURN 0;
END;

GO
<#+

        this.SaveOutput(Path.Combine(outputDirectory, spFileName + ".sql"));
      } // foreach table
    } // foreach schema
  } // foreach database
}
#>