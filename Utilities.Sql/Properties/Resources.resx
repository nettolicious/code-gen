<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DatabaseNotFound" xml:space="preserve">
    <value>Database '{0}' not found.</value>
  </data>
  <data name="ItemNotFound" xml:space="preserve">
    <value>'{0}' not found in list.</value>
  </data>
  <data name="NonNullableCast" xml:space="preserve">
    <value>Cannot cast DBNull.Value to type '{0}'. Please use a nullable type.  Column name = '{1}', column index = {2}.</value>
  </data>
  <data name="NoStoredProcedureName" xml:space="preserve">
    <value>There is no stored procedure name in '{0}'.</value>
  </data>
  <data name="SchemaNameNotFound" xml:space="preserve">
    <value>The '{0}' schema does not exist.</value>
  </data>
  <data name="UnknownTargetLanguageValue" xml:space="preserve">
    <value>Don't know how to handle the enumerated value TargetLanguage.{0}.</value>
  </data>
  <data name="UnknownXmlSystemValue" xml:space="preserve">
    <value>Don't know how to handle XmlSystem.{0}.</value>
  </data>
  <data name="InvalidStoredProcedureName" xml:space="preserve">
    <value>The 'name' parameter has an invalid form ('{0}').  Only one-part ([object name]) or two-part ([schema name].[object name]) T-SQL identifiers are allowed as a stored procedure name.</value>
  </data>
  <data name="InvalidStoredProcedureNameForSchema" xml:space="preserve">
    <value>'name' is a multipart name ('{0}').  Only one-part stored procedure names are allowed when adding a stored procedure to a schema.</value>
  </data>
  <data name="StoredProcedureAlreadyExists" xml:space="preserve">
    <value>The stored procedure '{0}', version {1} already exists.  If you have a stored procedure that has multiple versions, make sure the version numbers don't conflict.</value>
  </data>
  <data name="IdentiferHelperInitNotCalled" xml:space="preserve">
    <value>The IdentifierHelper.Init() method must be called before this method is called for the first time.</value>
  </data>
  <data name="Assert_IsOpen" xml:space="preserve">
    <value>The SqlConnection parameter '{0}' is not open.</value>
  </data>
  <data name="Make_UnknownFilenameFormat" xml:space="preserve">
    <value>'{0}' is not a one-, or two-part T-SQL identifier.</value>
  </data>
  <data name="Make_CreatedNewItem" xml:space="preserve">
    <value>Created new item for '{0}'.</value>
  </data>
  <data name="Make_Executed" xml:space="preserve">
    <value>Executed '{0}'.</value>
  </data>
  <data name="Make_ItemsDoNotExist" xml:space="preserve">
    <value>No items exist yet for pathname '{0}'.  Empty item data structure created in memory.</value>
  </data>
  <data name="Make_ItemsLoaded" xml:space="preserve">
    <value>Items loaded from '{0}'.</value>
  </data>
  <data name="Make_ItemsSaved" xml:space="preserve">
    <value>Items saved to '{0}'.</value>
  </data>
  <data name="Make_PathnameNotFound" xml:space="preserve">
    <value>Pathname '{0}' not found in items.</value>
  </data>
  <data name="Make_SourceFileDoesNotExist" xml:space="preserve">
    <value>Source file does not exist for database object [{0}].[{1}] (object type '{2}').</value>
  </data>
  <data name="Make_SuccessfullyCompiled" xml:space="preserve">
    <value>Successfully compiled '{0}'.</value>
  </data>
  <data name="Make_UnknownType" xml:space="preserve">
    <value>Unknown type: '{0}'.</value>
  </data>
  <data name="Make_UpdatedExistingItem_NeedsToBeCompiled" xml:space="preserve">
    <value>Needs to be compiled: '{0}'</value>
  </data>
  <data name="Make_UpdatedItemForFile" xml:space="preserve">
    <value>Updated item for file '{0}'.</value>
  </data>
  <data name="Make_UpdatedExistingItem_DoesNotNeedToBeCompiled" xml:space="preserve">
    <value>Does not need to be compiled: '{0}'</value>
  </data>
</root>