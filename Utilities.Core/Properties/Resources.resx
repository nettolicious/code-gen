<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Assert_StringInconsistentLengthParameters" xml:space="preserve">
    <value>The minimumLength parameter ({0}) cannot be greater than the maximumLength parameter ({1}).</value>
  </data>
  <data name="Assert_StringLengthsNotEqual" xml:space="preserve">
    <value>The length of string parameter '{0}' ({1}) does not equal {2}.</value>
  </data>
  <data name="Assert_StringLengthGreaterThanMaximum" xml:space="preserve">
    <value>The length of string parameter '{0}' ({1}) is greater than {2}.</value>
  </data>
  <data name="Assert_StringLengthLessThanMinimum" xml:space="preserve">
    <value>The length of string parameter '{0}' ({1}) is less than {2}.</value>
  </data>
  <data name="Assert_StringNotWhitespace" xml:space="preserve">
    <value>The string parameter '{0}' cannot consist only of whitespace.</value>
  </data>
  <data name="Assert_StringNotZeroLength" xml:space="preserve">
    <value>The string parameter '{0}' cannot have a length of zero.</value>
  </data>
  <data name="DateTimeUtils_QuarterNotInRange" xml:space="preserve">
    <value>A quarter of {0} is not valid. quarter must be between 1 and 4 inclusive.</value>
  </data>
  <data name="Exceptions_MissingFile" xml:space="preserve">
    <value>{0}Missing file is '{1}'.</value>
  </data>
  <data name="Exceptions_StackTrace" xml:space="preserve">
    <value>{0}Stack Trace:{0}{1}</value>
  </data>
  <data name="Graphics_BadFileExtension" xml:space="preserve">
    <value>The file extension '{0}' cannot be converted into an ImageFormat.</value>
  </data>
  <data name="Graphics_EmptyFileExtension" xml:space="preserve">
    <value>The file name '{0}' has no file extension.</value>
  </data>
  <data name="MathUtils_BadDigit" xml:space="preserve">
    <value>The parameter 'otherBaseNumber' ({0}) contains digits that are not valid for the parameter 'fromBase' {1}.</value>
  </data>
  <data name="MathUtils_BadRangeCheckValue" xml:space="preserve">
    <value>Unknown RangeCheck value ({0}).</value>
  </data>
  <data name="MathUtils_BaseOutOfRange" xml:space="preserve">
    <value>The parameter 'toBase' has an illegal value of {0}.  toBase must be between 2 and 36, inclusive.</value>
  </data>
  <data name="MathUtils_MinGreaterThanMax" xml:space="preserve">
    <value>The parameter 'min' ({0}) is greater than the parameter 'max' ({1}).</value>
  </data>
  <data name="Random_CountOutOfRange" xml:space="preserve">
    <value>'count' ({0}) must be greater than zero.</value>
  </data>
  <data name="Random_LowCharGreaterThanHighChar" xml:space="preserve">
    <value>'lowChar' ({0}) must be less than 'highChar' ({1}).</value>
  </data>
  <data name="Random_LowDateGreaterThanHighDate" xml:space="preserve">
    <value>'lowDate' ({0}) must be less than or equal to 'highDate' ({1}).</value>
  </data>
  <data name="Random_LowGreaterThanHigh" xml:space="preserve">
    <value>'low' ({0}) must be less than 'high' ({1}).</value>
  </data>
  <data name="Random_ProbabilityNotInRange" xml:space="preserve">
    <value>Parameter 'probability' ({0}) must be between 0.0 and 1.0, exclusive.</value>
  </data>
  <data name="Random_UnknownLetterCaseMixValue" xml:space="preserve">
    <value>Unknown value of LetterCaseMix enumeration ({0}).</value>
  </data>
  <data name="StringUtils_BooleanTruthLiterals" xml:space="preserve">
    <value>1,Y,T,TRUE,YES</value>
  </data>
  <data name="CommandLine_BadDateTime" xml:space="preserve">
    <value>Parameter '{0}' has a value of '{1}'.  That value cannot be converted to a System.DateTime.  The current thread's culture is '{2}'.</value>
  </data>
  <data name="CommandLine_BadDouble" xml:space="preserve">
    <value>Parameter '{0}' has a value of '{1}'.  That value cannot be converted to a System.Double.  The current thread's culture is '{2}'.</value>
  </data>
  <data name="CommandLine_BadEnumType" xml:space="preserve">
    <value>T has type '{0}'.  This method requires T to be an enumerated type.</value>
  </data>
  <data name="CommandLine_BadEnumValue" xml:space="preserve">
    <value>The parameter value '{0}' is not a valid value for the '{1}' enumerated type.</value>
  </data>
  <data name="CommandLine_BadInt32" xml:space="preserve">
    <value>Parameter '{0}' has a value of '{1}'.  That value cannot be converted to a System.Int32.</value>
  </data>
  <data name="CommandLine_ParameterNotFound" xml:space="preserve">
    <value>The parameter '{0}' could not be found.</value>
  </data>
  <data name="CommandLine_ResponseFileCouldNotBeProcessed" xml:space="preserve">
    <value>The response file '{0}' could not be processed.  See the InnerException property for details.</value>
  </data>
  <data name="CommandLine_ResponseFileDoesNotExist" xml:space="preserve">
    <value>The response file '{0}' does not exist.</value>
  </data>
  <data name="CommandLine_ResponseFileLineError" xml:space="preserve">
    <value>In response file '{0}', at line number {1}, the line of command line parameters '{2}' could not be parsed.  Error {3}: {4}</value>
  </data>
  <data name="Exceptions_File_Does_Not_Exist" xml:space="preserve">
    <value>File does not exist</value>
  </data>
  <data name="StringUtils_BadIndent" xml:space="preserve">
    <value>The 'indent' parameter has a value of '{0}'.  It must be between 0 and Int32.MaxValue, inclusive.</value>
  </data>
  <data name="Assert_BetweenExclusive" xml:space="preserve">
    <value>The parameter '{0}', which has value '{1}', is not between '{2}' and '{3}' (exclusive).</value>
  </data>
  <data name="Assert_BetweenInclusive" xml:space="preserve">
    <value>The parameter '{0}', which has value '{1}', is not between '{2}' and '{3}' (inclusive).</value>
  </data>
  <data name="Assert_ContainerIsEmpty" xml:space="preserve">
    <value>The parameter '{0}' is empty.</value>
  </data>
  <data name="Assert_EqualTo" xml:space="preserve">
    <value>The parameter '{0}', which has value '{1}', is equal to '{2}'.</value>
  </data>
  <data name="Assert_NotEqualTo" xml:space="preserve">
    <value>The parameter '{0}', which has value '{1}', is not equal to '{2}'.</value>
  </data>
  <data name="Assert_NotGreaterThan" xml:space="preserve">
    <value>The parameter '{0}', which has value '{1}', is not greater than '{2}'.</value>
  </data>
  <data name="Assert_NotGreaterThanOrEqualTo" xml:space="preserve">
    <value>The parameter '{0}', which has value '{1}', is not greater than or equal to '{2}'.</value>
  </data>
  <data name="Assert_NotLessThan" xml:space="preserve">
    <value>The parameter '{0}', which has value '{1}', is not less than '{2}'.</value>
  </data>
  <data name="Assert_NotLessThanOrEqualTo" xml:space="preserve">
    <value>The parameter '{0}', which has value '{1}', is not less than or equal to '{2}'.</value>
  </data>
  <data name="Assert_StringIsAllWhitespace" xml:space="preserve">
    <value>The string parameter '{0}' consists soley of whitespace.</value>
  </data>
  <data name="Assert_DirectoryExists" xml:space="preserve">
    <value>The string parameter '{0}' specifies directory '{1}' which does not exist.</value>
  </data>
  <data name="Assert_FileExists" xml:space="preserve">
    <value>The string parameter '{0}' specifies file '{1}' which does not exist.</value>
  </data>
  <data name="StringUtils_Coalesce" xml:space="preserve">
    <value>All of the parameters are either null, have zero length, or consist only of whitespace.</value>
  </data>
  <data name="Utils_BadLoginDateTime" xml:space="preserve">
    <value>WMI Error.  The Win32_Session class does not return data unless the caller is running with sufficient permissions.  Alter the user's permissions or run the application as an adminstrator to avoid this error.</value>
  </data>
  <data name="Utils_FormatMessageError" xml:space="preserve">
    <value>The original error code is {0}.  Trying to get a description of the original error by calling the FormatMessage API function returned another error of {1}.</value>
  </data>
  <data name="Utils_NoSystemErrorMessageFound" xml:space="preserve">
    <value>The original error code is {0}.  No description could be found for that error code.</value>
  </data>
  <data name="Utils_UnknownRunProcessType" xml:space="preserve">
    <value>Unknown RunProcessType value ({0}).</value>
  </data>
</root>